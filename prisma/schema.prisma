generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(uuid())
  email             String     @unique
  password          String
  role              UserRole
  firstName         String?
  lastName          String?
  phoneNumber       String?
  profilePhoto      String?
  isProfileUpdated  Boolean    @default(false)
  isVerified        Boolean    @default(false)
  status            UserStatus @default(ACTIVE)
  passwordChangedAt DateTime   @default(now())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  landlord          Landlord?
  tenant            Tenant?
  admin             Admin?
  review            Review[]

  @@map("users")
}

model Landlord {
  id           String   @id @default(uuid())
  userId       String   @unique
  email        String   @unique
  firstName    String
  lastName     String
  languages    String[]
  phoneNumber  String
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user            User              @relation(fields: [userId], references: [id])
  propertyListing PropertyListing[]

  @@map("landlord")
}

model Tenant {
  id                String   @id @default(uuid())
  userId            String   @unique
  email             String   @unique
  firstName         String
  lastName          String
  phoneNumber       String
  gender            Gender
  profilePhoto      String?
  description       String
  age               Int
  minBudget         Float
  maxBudget         Float
  isAvailable       Boolean  @default(false)
  lookingIn         String[]
  amenitiesRequired String[]
  minAge            Int
  maxAge            Int
  // anyPets           Boolean
  occupation        String

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  householdPreference HouseholdPreference?
  availability        Availability?
  user                User                 @relation(fields: [userId], references: [id])
  rentNowTenantInfo   RentNowTenantInfo[]

  @@map("tenant")
}

model Availability {
  id       String @id @default(uuid())
  tenantId String @unique

  moveIn  String
  minTerm String
  maxTerm String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("availability")
}

model HouseholdPreference {
  id         String  @id @default(uuid())
  tenantId   String  @unique
  isSmoker   Boolean @default(false)
  isPetOwner Boolean @default(false)
  occupation String
  minAge     Int
  maxAge     Int
  gender     Gender

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("household_preference")
}

model Admin {
  id           String   @id @default(uuid())
  userId       String   @unique
  firstName    String
  lastName     String
  email        String   @unique
  phoneNumber  String
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("admin")
}

model TemporaryProperty {
  id        String   @id @default(uuid())
  userId    String   @unique
  step      String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("temporary_property")
}

model PropertyListing {
  id                 String            @id @default(uuid())
  landlordId         String
  email              String
  propertyOption     String
  postcode           String
  houseNumber        String
  address            String
  address2           String?
  propertyType       PropertyType
  bedrooms           Int
  bathrooms          Int
  furnishingOptions  FurnishingOptions
  town               String
  description        String
  latitude           Float?
  longitude          Float?
  propertyImages     String[]
  remoteVideoViewing Boolean
  viewingDescription String?
  youtubeUrl         String?
  propertyFor        PropertyFor

  monthlyRent    Float
  minimumTenancy Int
  weeklyRent     Float
  maximumTenancy Int
  depositAmount  String
  moveInDate     String

  billsIncluded Boolean
  gardenAccess  Boolean
  parking       Boolean
  fireplace     Boolean

  studentAllowed    Boolean
  familiesAllowed   Boolean
  dssIncomeAccepted Boolean
  petsAllowed       Boolean
  smokersAllowed    Boolean

  termsAgreed   Boolean
  planId        String
  transactionId String

  isPopular Boolean  @default(false)
  isRented  Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  landlord Landlord @relation(fields: [landlordId], references: [id])

  @@map("property_listing")
}

model RentNowTenantInfo {
  id                 String  @id @default(uuid())
  referredByTenantId String
  userId             String
  email              String  @unique
  fullName           String
  phoneNumber        String  @unique
  description        String?
  moveInDate         String
  propertyId         String
  isCompleted        Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [referredByTenantId], references: [id])

  @@map("rent_now_tenant_info")
}

model Review {
  id          String @id @default(uuid())
  reviewerId  String
  recipientId String
  rating      Int
  comment     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [reviewerId], references: [id])

  @@map("review")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  LANDLORD
  TENANT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

// enum PropertyOption {
//   WHOLE_PROPERTY
//   INDIVIDUAL_ROOMS
//   EITHER
// }

enum PropertyType {
  FLAT
  BEDSIT
}

enum FurnishingOptions {
  FURNISHED
  UNFURNISHED
  CHOICE
}

enum PropertyFor {
  RENT
  SELL
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
